
(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
import { a as applyHmr, b as adapter, S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, t as text, c as insert_dev, n as noop, e as detach_dev, w as writable, f as validate_store, g as component_subscribe, o as onMount, h as create_component, j as empty, m as mount_component, _ as _slicedToArray, k as transition_out, l as check_outros, p as transition_in, q as destroy_component, r as group_outros } from './main.js';

/* src/pages/_templates/faq.svelte generated by Svelte v3.44.3 */

function create_fragment$4(ctx) {
  let t;
  const block = {
    c: function create() {
      t = text("faq");
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      insert_dev(target, t, anchor);
    },
    p: noop,
    i: noop,
    o: noop,
    d: function destroy(detaching) {
      if (detaching) detach_dev(t);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment$4.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}

function instance$4($$self, $$props) {
  let _$$props$$$slots = $$props.$$slots,
      slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots;
      $$props.$$scope;
  validate_slots('Faq', slots, []);
  const writable_props = [];
  Object.keys($$props).forEach(key => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Faq> was created with unknown prop '${key}'`);
  });
  return [];
}

class Faq extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance$4, create_fragment$4, safe_not_equal, {});
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Faq",
      options,
      id: create_fragment$4.name
    });
  }

}

if (import.meta && import.meta.hot) {
  Faq = applyHmr({
    m: import.meta,
    id: "/mnt/c/dev/repo/personal/svelte-wordpress-templates/svelte-routify/src/pages/_templates/faq.svelte",
    hotOptions: {
      "preserveLocalState": false,
      "noPreserveStateKey": ["@hmr:reset", "@!hmr"],
      "preserveAllLocalStateKey": "@hmr:keep-all",
      "preserveLocalStateKey": "@hmr:keep",
      "noReload": false,
      "optimistic": true,
      "acceptNamedExports": true,
      "acceptAccessors": true,
      "injectCss": false,
      "cssEjectDelay": 100,
      "native": false,
      "importAdapterName": "___SVELTE_HMR_HOT_API_PROXY_ADAPTER",
      "noOverlay": false,
      "allowLiveBinding": false
    },
    Component: Faq,
    ProxyAdapter: adapter,
    acceptable: true,
    preserveLocalState: false,
    emitCss: false
  });
}

var Faq$1 = Faq;

/* src/pages/_templates/post.svelte generated by Svelte v3.44.3 */

function create_fragment$3(ctx) {
  let t;
  const block = {
    c: function create() {
      t = text("post");
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      insert_dev(target, t, anchor);
    },
    p: noop,
    i: noop,
    o: noop,
    d: function destroy(detaching) {
      if (detaching) detach_dev(t);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment$3.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}

function instance$3($$self, $$props) {
  let _$$props$$$slots = $$props.$$slots,
      slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots;
      $$props.$$scope;
  validate_slots('Post', slots, []);
  const writable_props = [];
  Object.keys($$props).forEach(key => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Post> was created with unknown prop '${key}'`);
  });
  return [];
}

class Post extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance$3, create_fragment$3, safe_not_equal, {});
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Post",
      options,
      id: create_fragment$3.name
    });
  }

}

if (import.meta && import.meta.hot) {
  Post = applyHmr({
    m: import.meta,
    id: "/mnt/c/dev/repo/personal/svelte-wordpress-templates/svelte-routify/src/pages/_templates/post.svelte",
    hotOptions: {
      "preserveLocalState": false,
      "noPreserveStateKey": ["@hmr:reset", "@!hmr"],
      "preserveAllLocalStateKey": "@hmr:keep-all",
      "preserveLocalStateKey": "@hmr:keep",
      "noReload": false,
      "optimistic": true,
      "acceptNamedExports": true,
      "acceptAccessors": true,
      "injectCss": false,
      "cssEjectDelay": 100,
      "native": false,
      "importAdapterName": "___SVELTE_HMR_HOT_API_PROXY_ADAPTER",
      "noOverlay": false,
      "allowLiveBinding": false
    },
    Component: Post,
    ProxyAdapter: adapter,
    acceptable: true,
    preserveLocalState: false,
    emitCss: false
  });
}

var Post$1 = Post;

/* src/pages/_templates/page.svelte generated by Svelte v3.44.3 */

function create_fragment$2(ctx) {
  let t;
  const block = {
    c: function create() {
      t = text("page");
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      insert_dev(target, t, anchor);
    },
    p: noop,
    i: noop,
    o: noop,
    d: function destroy(detaching) {
      if (detaching) detach_dev(t);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment$2.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}

function instance$2($$self, $$props) {
  let _$$props$$$slots = $$props.$$slots,
      slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots;
      $$props.$$scope;
  validate_slots('Page', slots, []);
  const writable_props = [];
  Object.keys($$props).forEach(key => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Page> was created with unknown prop '${key}'`);
  });
  return [];
}

class Page extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance$2, create_fragment$2, safe_not_equal, {});
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Page",
      options,
      id: create_fragment$2.name
    });
  }

}

if (import.meta && import.meta.hot) {
  Page = applyHmr({
    m: import.meta,
    id: "/mnt/c/dev/repo/personal/svelte-wordpress-templates/svelte-routify/src/pages/_templates/page.svelte",
    hotOptions: {
      "preserveLocalState": false,
      "noPreserveStateKey": ["@hmr:reset", "@!hmr"],
      "preserveAllLocalStateKey": "@hmr:keep-all",
      "preserveLocalStateKey": "@hmr:keep",
      "noReload": false,
      "optimistic": true,
      "acceptNamedExports": true,
      "acceptAccessors": true,
      "injectCss": false,
      "cssEjectDelay": 100,
      "native": false,
      "importAdapterName": "___SVELTE_HMR_HOT_API_PROXY_ADAPTER",
      "noOverlay": false,
      "allowLiveBinding": false
    },
    Component: Page,
    ProxyAdapter: adapter,
    acceptable: true,
    preserveLocalState: false,
    emitCss: false
  });
}

var Page$1 = Page;

/* src/pages/_templates/404.svelte generated by Svelte v3.44.3 */

function create_fragment$1(ctx) {
  let t;
  const block = {
    c: function create() {
      t = text("404");
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      insert_dev(target, t, anchor);
    },
    p: noop,
    i: noop,
    o: noop,
    d: function destroy(detaching) {
      if (detaching) detach_dev(t);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment$1.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}

function instance$1($$self, $$props) {
  let _$$props$$$slots = $$props.$$slots,
      slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots;
      $$props.$$scope;
  validate_slots('_404', slots, []);
  const writable_props = [];
  Object.keys($$props).forEach(key => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<_404> was created with unknown prop '${key}'`);
  });
  return [];
}

class _404 extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance$1, create_fragment$1, safe_not_equal, {});
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "_404",
      options,
      id: create_fragment$1.name
    });
  }

}

if (import.meta && import.meta.hot) {
  _404 = applyHmr({
    m: import.meta,
    id: "/mnt/c/dev/repo/personal/svelte-wordpress-templates/svelte-routify/src/pages/_templates/404.svelte",
    hotOptions: {
      "preserveLocalState": false,
      "noPreserveStateKey": ["@hmr:reset", "@!hmr"],
      "preserveAllLocalStateKey": "@hmr:keep-all",
      "preserveLocalStateKey": "@hmr:keep",
      "noReload": false,
      "optimistic": true,
      "acceptNamedExports": true,
      "acceptAccessors": true,
      "injectCss": false,
      "cssEjectDelay": 100,
      "native": false,
      "importAdapterName": "___SVELTE_HMR_HOT_API_PROXY_ADAPTER",
      "noOverlay": false,
      "allowLiveBinding": false
    },
    Component: _404,
    ProxyAdapter: adapter,
    acceptable: true,
    preserveLocalState: false,
    emitCss: false
  });
}

var ErrorPage = _404;

const navigated = writable(0);

function create_fragment(ctx) {
  let t;
  let switch_instance;
  let switch_instance_anchor;
  let current;
  var switch_value =
  /*template*/
  ctx[0];

  function switch_props(ctx) {
    return {
      $$inline: true
    };
  }

  if (switch_value) {
    switch_instance = new switch_value(switch_props());
  }

  const block = {
    c: function create() {
      t = text("fallback\n");
      if (switch_instance) create_component(switch_instance.$$.fragment);
      switch_instance_anchor = empty();
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      insert_dev(target, t, anchor);

      if (switch_instance) {
        mount_component(switch_instance, target, anchor);
      }

      insert_dev(target, switch_instance_anchor, anchor);
      current = true;
    },
    p: function update(ctx, _ref) {
      let _ref2 = _slicedToArray(_ref, 1);
          _ref2[0];

      if (switch_value !== (switch_value =
      /*template*/
      ctx[0])) {
        if (switch_instance) {
          group_outros();
          const old_component = switch_instance;
          transition_out(old_component.$$.fragment, 1, 0, () => {
            destroy_component(old_component, 1);
          });
          check_outros();
        }

        if (switch_value) {
          switch_instance = new switch_value(switch_props());
          create_component(switch_instance.$$.fragment);
          transition_in(switch_instance.$$.fragment, 1);
          mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
        } else {
          switch_instance = null;
        }
      }
    },
    i: function intro(local) {
      if (current) return;
      if (switch_instance) transition_in(switch_instance.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      if (switch_instance) transition_out(switch_instance.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) detach_dev(t);
      if (detaching) detach_dev(switch_instance_anchor);
      if (switch_instance) destroy_component(switch_instance, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}

function instance($$self, $$props, $$invalidate) {
  let $navigated;
  validate_store(navigated, 'navigated');
  component_subscribe($$self, navigated, $$value => $$invalidate(1, $navigated = $$value));
  let _$$props$$$slots = $$props.$$slots,
      slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots;
      $$props.$$scope;
  validate_slots('Fallback', slots, []);
  let template; // Force scroll position to top

  onMount(() => window.scrollTo(0, 0));
  const writable_props = [];
  Object.keys($$props).forEach(key => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Fallback> was created with unknown prop '${key}'`);
  });

  $$self.$capture_state = () => ({
    Faq: Faq$1,
    Post: Post$1,
    Page: Page$1,
    ErrorPage,
    navigated,
    onMount,
    template,
    $navigated
  });

  $$self.$inject_state = $$props => {
    if ('template' in $$props) $$invalidate(0, template = $$props.template);
  };

  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }

  $$self.$$.update = () => {
    if ($$self.$$.dirty &
    /*$navigated*/
    2) {
      if ($navigated >= 0) {
        if (wordpress.current.type === "page") {
          $$invalidate(0, template = Page$1);
        } else if (wordpress.current.type === "post") {
          $$invalidate(0, template = Post$1);
        } else if (wordpress.current.type === "faq") {
          $$invalidate(0, template = Faq$1);
        } else if (!wordpress.current.notfound) {
          $$invalidate(0, template = ErrorPage);
        }
      }
    }
  };

  return [template, $navigated];
}

class Fallback extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance, create_fragment, safe_not_equal, {});
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Fallback",
      options,
      id: create_fragment.name
    });
  }

}

if (import.meta && import.meta.hot) {
  Fallback = applyHmr({
    m: import.meta,
    id: "/mnt/c/dev/repo/personal/svelte-wordpress-templates/svelte-routify/src/pages/_fallback.svelte",
    hotOptions: {
      "preserveLocalState": false,
      "noPreserveStateKey": ["@hmr:reset", "@!hmr"],
      "preserveAllLocalStateKey": "@hmr:keep-all",
      "preserveLocalStateKey": "@hmr:keep",
      "noReload": false,
      "optimistic": true,
      "acceptNamedExports": true,
      "acceptAccessors": true,
      "injectCss": false,
      "cssEjectDelay": 100,
      "native": false,
      "importAdapterName": "___SVELTE_HMR_HOT_API_PROXY_ADAPTER",
      "noOverlay": false,
      "allowLiveBinding": false
    },
    Component: Fallback,
    ProxyAdapter: adapter,
    acceptable: true,
    preserveLocalState: false,
    emitCss: false
  });
}

var Fallback$1 = Fallback;

export { Fallback$1 as default };
//# sourceMappingURL=_fallback.js.map
